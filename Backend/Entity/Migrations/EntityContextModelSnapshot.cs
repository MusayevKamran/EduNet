// <auto-generated />
using System;
using EntityData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityData.Migrations
{
    [DbContext(typeof(EntityContext))]
    partial class EntityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityData.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About");

                    b.Property<string>("Education");

                    b.Property<string>("FirstName");

                    b.Property<int>("Follower");

                    b.Property<string>("Image");

                    b.Property<string>("Job");

                    b.Property<int>("Like");

                    b.Property<string>("Quote");

                    b.Property<string>("SecondName");

                    b.Property<string>("URL");

                    b.Property<int>("View");

                    b.HasKey("Id");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("EntityData.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppUserId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Like");

                    b.Property<int>("PostCategory");

                    b.Property<int>("Row");

                    b.Property<string>("Title");

                    b.Property<string>("URL");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("EntityData.Models.ArticleCategory", b =>
                {
                    b.Property<int>("ArticleId");

                    b.Property<int>("CategoryId");

                    b.HasKey("ArticleId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("EntityData.Models.ArticleImages", b =>
                {
                    b.Property<int>("ArticleId");

                    b.Property<int>("ImageId");

                    b.HasKey("ArticleId", "ImageId");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("ArticleImages");
                });

            modelBuilder.Entity("EntityData.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsNew");

                    b.Property<string>("Name");

                    b.Property<int>("Row");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("EntityData.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AppUserId");

                    b.Property<int?>("ArticleId");

                    b.Property<string>("Content");

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("EntityData.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageLink");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("EntityData.Models.Article", b =>
                {
                    b.HasOne("EntityData.Models.AppUser", "AppUser")
                        .WithMany("Article")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("EntityData.Models.ArticleCategory", b =>
                {
                    b.HasOne("EntityData.Models.Article", "Article")
                        .WithMany("ArticleCategory")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EntityData.Models.Category", "Category")
                        .WithMany("ArticleCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityData.Models.ArticleImages", b =>
                {
                    b.HasOne("EntityData.Models.Article", "Article")
                        .WithMany("Images")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EntityData.Models.Image", "Image")
                        .WithOne("ArticleImages")
                        .HasForeignKey("EntityData.Models.ArticleImages", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityData.Models.Comment", b =>
                {
                    b.HasOne("EntityData.Models.AppUser", "AppUser")
                        .WithMany("Comment")
                        .HasForeignKey("AppUserId");

                    b.HasOne("EntityData.Models.Article", "Article")
                        .WithMany("Comment")
                        .HasForeignKey("ArticleId");
                });
#pragma warning restore 612, 618
        }
    }
}
